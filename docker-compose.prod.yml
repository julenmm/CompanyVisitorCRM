version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: companymap_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-companymap_db}
      POSTGRES_USER: ${POSTGRES_USER:-companymap_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-companymap_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - companymap_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-companymap_user} -d ${POSTGRES_DB:-companymap_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Backend (Production)
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile.prod
    container_name: companymap_backend_prod
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-3ln(*noune3spo1&j%%@t0g%dm^ui!m(1(6ab4h&2p7e(xf&s+}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-companymap_user}:${POSTGRES_PASSWORD:-companymap_password}@postgres:5432/${POSTGRES_DB:-companymap_db}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,backend}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - backend_static_prod:/app/staticfiles
      - backend_media_prod:/app/media
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - companymap_network_prod
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    restart: unless-stopped

  # React Frontend (Production)
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: companymap_frontend_prod
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - VITE_API_URL=http://localhost:${BACKEND_PORT:-8000}
    depends_on:
      - backend
    networks:
      - companymap_network_prod
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: companymap_nginx_prod
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf
      - backend_static_prod:/var/www/static
      - backend_media_prod:/var/www/media
      - ./ssl:/etc/nginx/ssl  # For SSL certificates if needed
    depends_on:
      - backend
      - frontend
    networks:
      - companymap_network_prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  backend_static_prod:
    driver: local
  backend_media_prod:
    driver: local

networks:
  companymap_network_prod:
    driver: bridge
